// Simulated Annealing Flowchart
digraph {
	bgcolor=white margin=0.3 nodesep=1.2 page="8.27,11.69" rankdir=TB ranksep=1.2 size="8.27,11.69!" splines=spline
	node [fontname="Helvetica-Bold" fontsize=32]
	edge [fontcolor=black fontname="Helvetica-Bold" fontsize=32 penwidth=3]
	start [label=Start fillcolor="#AEDFF7" fontcolor=black height=2 shape=oval style=filled width=3]
	init [label="Initialize solution x randomly
Compute F(x) = cost + penalty_factor * (coverage violations)" fillcolor="#85C1E9" fontcolor=black height=2 shape=box style="rounded,filled" width=6]
	best [label="Set initial best solution:
  x_best ← x
  F_best ← F(x)" fillcolor="#85C1E9" fontcolor=black height=2 shape=box style="rounded,filled" width=6]
	iter [label="For each iteration
(1 to max_iter)" fillcolor="#A9DFBF" fontcolor=black height=2 shape=box style="rounded,filled" width=6]
	neighbor [label="Generate neighbor x'
(by flipping one random bit)" fillcolor="#BB8FCE" fontcolor=black height=2 shape=box style="rounded,filled" width=6]
	compute [label="Compute F(x')" fillcolor="#BB8FCE" fontcolor=black height=2 shape=box style="rounded,filled" width=6]
	compare [label="Is F(x') < F(x)?" fillcolor="#F7DC6F" fontcolor=black height=3 shape=diamond style=filled width=6]
	accept [label="Accept x' as current solution" fillcolor="#A3E4D7" fontcolor=black height=2 shape=box style="rounded,filled" width=6]
	metropolis [label="Δ = F(x') - F(x)
Acceptance probability = exp(-Δ/T)
Accept x' with this probability?" fillcolor="#F0B27A" fontcolor=black height=2 shape=box style="rounded,filled" width=6]
	update_best [label="If F(current) < F_best
Update best solution" fillcolor="#F5B7B1" fontcolor=black height=2 shape=box style="rounded,filled" width=6]
	cool [label="Update temperature:
T = α × T" fillcolor="#76D7C4" fontcolor=black height=2 shape=box style="rounded,filled" width=6]
	loop [label="More iterations?
(Iteration < max_iter & T > T_min)" fillcolor="#F9E79F" fontcolor=black height=3 shape=diamond style=filled width=6]
	end [label="End
Return x_best and F_best" fillcolor="#AEDFF7" fontcolor=black height=2 shape=oval style=filled width=3]
	start -> init
	init -> best [label="Initialize & Compute F(x)"]
	best -> iter [label="Set initial best"]
	iter -> neighbor
	neighbor -> compute [label="Generate neighbor solution"]
	compute -> compare [label="Evaluate F(x')"]
	compare -> accept [label="Yes:
F(x') < F(x)"]
	compare -> metropolis [label="No:
F(x') ≥ F(x)"]
	accept -> update_best
	metropolis -> update_best
	update_best -> cool [label="If improved, update best"]
	cool -> loop
	loop -> iter [label="Yes:
Continue iterations" style=dashed]
	loop -> end [label="No:
Terminate SA" style=bold]
	subgraph cluster_iteration {
		color=blue style=dashed
		iter
		neighbor
		compute
		compare
		accept
		metropolis
		update_best
		cool
		loop
	}
}
